%% analyze_behavior.m
%
% This function executes a single behavioral analysis as defined by an
% entry in the behavior_plan. It retrieves a pre-calculated dependent
% variable (e.g., reaction time) and categorical factors from the
% `conditions` struct, fits a linear mixed-effects model, and returns the
% results.
%
% This function relies on `define_task_conditions.m` to have already
% generated the logical masks, categorical factors, and dependent variables
% in the `conditions` struct.
%
% The `trial_mask` in the `behavior_plan_item` can be a single string or a
% cell array of strings. If it is a cell array, the masks are combined
% with a logical AND.
%
% Author: Jules
% Date: 2025-09-14
%

function results = analyze_behavior(session_data, conditions, behavior_plan_item)
% ANALYZE_BEHAVIOR Fits a linear mixed-effects model to behavioral data.
%
% INPUTS:
%   session_data:       The main session data structure (used for metadata).
%   conditions:         A struct generated by `define_task_conditions.m`.
%                       It must contain logical masks, a `factors` sub-struct,
%                       and a `dvs` sub-struct with pre-calculated
%                       dependent variables.
%   behavior_plan_item: A single element from the analysis_plan.behavior_plan
%                       struct array, defining the analysis to be run.
%                       Its `trial_mask` field can be a string or a cell
%                       array of strings.
%
% OUTPUTS:
%   results:            An ANOVA table from the fitted LME model.

%% Setup Paths
% Add the 'utils' directory to the path so that helper functions can be
% found.
[script_dir, ~, ~] = fileparts(mfilename('fullpath'));
addpath(fullfile(script_dir, 'utils'));

%% --- 1. Prepare Data Table ---
% This section constructs a table suitable for fitting a linear
% mixed-effects model. It combines the dependent variable with the
% categorical independent variables (factors) and a random effect for the
% session.

% Get the logical trial mask for this specific analysis. This mask is a
% subset of the master '4factors' mask, selecting for specific experiment
% conditions (e.g., 'is_contralateral_target').
trial_mask_name = behavior_plan_item.trial_mask;
if iscell(trial_mask_name)
    % If the mask is a cell array, combine the masks with a logical AND.
    % All masks in `conditions` are of the same size, so we can initialize
    % the combined mask with the first one.
    combined_mask = conditions.(trial_mask_name{1});
    for i = 2:length(trial_mask_name)
        combined_mask = combined_mask & conditions.(trial_mask_name{i});
    end
    trial_mask = combined_mask;
else
    % Otherwise, handle it as a single string
    trial_mask = conditions.(trial_mask_name);
end

% Dependent Variable
% Derive the DV name from the plan item (e.g., 'reaction_time')
name_parts = strsplit(behavior_plan_item.name, '_');
dv_name = strjoin(name_parts(1:end-1), '_');

% Retrieve the pre-calculated DV vector and apply the analysis-specific mask
dv_vector = conditions.dvs.(dv_name);
dvTemp = dv_vector(trial_mask);
tbl = table(dvTemp(:), 'VariableNames', {'DV'});

% Independent Variables (Factors)
factors = behavior_plan_item.factors;
for i = 1:length(factors)
    factor_name = factors{i};
    % Retrieve the pre-computed categorical factor from the conditions struct.
    % The data is already filtered by the master '4factors' mask, so we
    % can apply the analysis-specific `trial_mask` to it.
    factor_data = conditions.factors.(factor_name);
    tbl.(factor_name) = categorical(factor_data(trial_mask));
end

% Random Effect (Session ID)
% Replicate the session_id to match the number of trials in the mask
session_id_str = session_data.metadata.unique_id;
num_valid_trials = sum(trial_mask);
session_id_col = repmat({session_id_str}, num_valid_trials, 1);
tbl.session_id = categorical(session_id_col);


%% --- 2. Fit Linear Mixed-Effects Model ---
% Dynamically construct the model formula string, e.g.,
% 'DV ~ reward * salience * identity * probability + (1|session_id)'
factor_string = strjoin(factors, ' * ');
formula = sprintf('DV ~ %s + (1|session_id)', factor_string);

% Fit the model. Suppress non-integer response warning, as reaction
% times and other measures are often floating-point values.
warning('off', 'stats:fitlme:NonIntegerVarResp');
lme = fitlme(tbl, formula);
warning('on', 'stats:fitlme:NonIntegerVarResp');

% Extract the ANOVA table containing the statistics for each factor
results = anova(lme);

end

end